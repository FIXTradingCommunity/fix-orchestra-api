/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The EntityAttributes model module.
* @module model/EntityAttributes
* @version 1.0.1
*/
export default class EntityAttributes {
    /**
    * Constructs a new <code>EntityAttributes</code>.
    * element metadata including pedigree
    * @alias module:model/EntityAttributes
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>EntityAttributes</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/EntityAttributes} obj Optional instance to populate.
    * @return {module:model/EntityAttributes} The populated <code>EntityAttributes</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityAttributes();

            
            
            

            if (data.hasOwnProperty('added')) {
                obj['added'] = ApiClient.convertToType(data['added'], 'String');
            }
            if (data.hasOwnProperty('addedEP')) {
                obj['addedEP'] = ApiClient.convertToType(data['addedEP'], 'Number');
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'String');
            }
            if (data.hasOwnProperty('deprecatedEP')) {
                obj['deprecatedEP'] = ApiClient.convertToType(data['deprecatedEP'], 'Number');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'String');
            }
            if (data.hasOwnProperty('replaced')) {
                obj['replaced'] = ApiClient.convertToType(data['replaced'], 'String');
            }
            if (data.hasOwnProperty('replacedEP')) {
                obj['replacedEP'] = ApiClient.convertToType(data['replacedEP'], 'Number');
            }
            if (data.hasOwnProperty('replacedByField')) {
                obj['replacedByField'] = ApiClient.convertToType(data['replacedByField'], 'Number');
            }
            if (data.hasOwnProperty('supported')) {
                obj['supported'] = ApiClient.convertToType(data['supported'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('updatedEP')) {
                obj['updatedEP'] = ApiClient.convertToType(data['updatedEP'], 'Number');
            }
        }
        return obj;
    }

    /**
    * @member {String} added
    */
    added = undefined;
    /**
    * @member {Number} addedEP
    */
    addedEP = undefined;
    /**
    * @member {module:model/EntityAttributes.ChangeTypeEnum} changeType
    */
    changeType = undefined;
    /**
    * @member {String} deprecated
    */
    deprecated = undefined;
    /**
    * @member {Number} deprecatedEP
    */
    deprecatedEP = undefined;
    /**
    * @member {String} issue
    */
    issue = undefined;
    /**
    * @member {String} lastModified
    */
    lastModified = undefined;
    /**
    * @member {String} replaced
    */
    replaced = undefined;
    /**
    * @member {Number} replacedEP
    */
    replacedEP = undefined;
    /**
    * @member {Number} replacedByField
    */
    replacedByField = undefined;
    /**
    * @member {module:model/EntityAttributes.SupportedEnum} supported
    * @default 'supported'
    */
    supported = 'supported';
    /**
    * @member {String} updated
    */
    updated = undefined;
    /**
    * @member {Number} updatedEP
    */
    updatedEP = undefined;






    /**
    * Allowed values for the <code>changeType</code> property.
    * @enum {String}
    * @readonly
    */
    static ChangeTypeEnum = {
    
        /**
         * value: "Editorial"
         * @const
         */
        "Editorial": "Editorial",
    
        /**
         * value: "Definitional"
         * @const
         */
        "Definitional": "Definitional"    
    };

    /**
    * Allowed values for the <code>supported</code> property.
    * @enum {String}
    * @readonly
    */
    static SupportedEnum = {
    
        /**
         * value: "supported"
         * @const
         */
        "supported": "supported",
    
        /**
         * value: "forbidden"
         * @const
         */
        "forbidden": "forbidden",
    
        /**
         * value: "ignored"
         * @const
         */
        "ignored": "ignored"    
    };



}


