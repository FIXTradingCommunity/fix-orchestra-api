/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Code from '../model/Code';
import CodeSet from '../model/CodeSet';
import Component from '../model/Component';
import Datatype from '../model/Datatype';
import ErrorModel from '../model/ErrorModel';
import Field from '../model/Field';
import Group from '../model/Group';
import Message from '../model/Message';
import Repository from '../model/Repository';

/**
* Repository service.
* @module api/RepositoryApi
* @version 1.0.0
*/
export default class RepositoryApi {

    /**
    * Constructs a new RepositoryApi. 
    * @alias module:api/RepositoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCode operation.
     * @callback module:api/RepositoryApi~addCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a Code to CodeSet
     * Adds a Code
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} codesetid ID of CodeSet
     * @param {Object} opts Optional parameters
     * @param {module:model/Code} opts.code Code to add
     * @param {module:api/RepositoryApi~addCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCode(reposName, version, codesetid, opts, callback) {
      opts = opts || {};
      let postBody = opts['code'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addCode");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addCode");
      }

      // verify the required parameter 'codesetid' is set
      if (codesetid === undefined || codesetid === null) {
        throw new Error("Missing the required parameter 'codesetid' when calling addCode");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'codesetid': codesetid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{codesetid}/codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addCodeSet operation.
     * @callback module:api/RepositoryApi~addCodeSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a CodeSet
     * Adds a CodeSet
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeSet} opts.codeSet CodeSet to add
     * @param {module:api/RepositoryApi~addCodeSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCodeSet(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['codeSet'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addCodeSet");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addCodeSet");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addComponent operation.
     * @callback module:api/RepositoryApi~addComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a component
     * Adds a component
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Component} opts.component Component to add
     * @param {Number} opts.toClone ID of component to clone
     * @param {module:api/RepositoryApi~addComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addComponent(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['component'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addComponent");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addComponent");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'toClone': opts['toClone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addDatatype operation.
     * @callback module:api/RepositoryApi~addDatatypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a datatype
     * Adds a datatype
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Datatype} opts.datatype Datatype to add
     * @param {module:api/RepositoryApi~addDatatypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDatatype(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['datatype'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addDatatype");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addDatatype");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/datatypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addField operation.
     * @callback module:api/RepositoryApi~addFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a field
     * Adds a field
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Field} opts.field field to add
     * @param {module:api/RepositoryApi~addFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addField(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['field'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addField");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addField");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addGroup operation.
     * @callback module:api/RepositoryApi~addGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a repeating group
     * Adds a group
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Group} opts.group Group to add
     * @param {Number} opts.toClone ID of group to clone
     * @param {module:api/RepositoryApi~addGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addGroup(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['group'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addGroup");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addGroup");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'toClone': opts['toClone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addMessage operation.
     * @callback module:api/RepositoryApi~addMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a message scenario
     * Adds a message scenario
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Message} opts.message message to add
     * @param {Number} opts.toClone ID of message to clone
     * @param {module:api/RepositoryApi~addMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMessage(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['message'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addMessage");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addMessage");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'toClone': opts['toClone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addRepository operation.
     * @callback module:api/RepositoryApi~addRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an Orchestra repository
     * Adds an Orchestra repository
     * @param {module:model/Repository} repository Orchestra repository to add
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameToClone name of Orchestra repository to clone
     * @param {String} opts.versionToClone version of Orchestra repository to clone
     * @param {module:api/RepositoryApi~addRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRepository(repository, opts, callback) {
      opts = opts || {};
      let postBody = repository;

      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling addRepository");
      }


      let pathParams = {
      };
      let queryParams = {
        'nameToClone': opts['nameToClone'],
        'versionToClone': opts['versionToClone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCode operation.
     * @callback module:api/RepositoryApi~deleteCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single Code based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} codesetid ID of CodeSet
     * @param {Number} id ID of Code to delete
     * @param {module:api/RepositoryApi~deleteCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCode(reposName, version, codesetid, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteCode");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteCode");
      }

      // verify the required parameter 'codesetid' is set
      if (codesetid === undefined || codesetid === null) {
        throw new Error("Missing the required parameter 'codesetid' when calling deleteCode");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCode");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'codesetid': codesetid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{codesetid}/codes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCodeSet operation.
     * @callback module:api/RepositoryApi~deleteCodeSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single CodeSet based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of CodeSet to delete
     * @param {module:api/RepositoryApi~deleteCodeSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCodeSet(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteCodeSet");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteCodeSet");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCodeSet");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComponent operation.
     * @callback module:api/RepositoryApi~deleteComponentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single component based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of component to delete
     * @param {module:api/RepositoryApi~deleteComponentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComponent(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteComponent");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteComponent");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComponent");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/components/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDatatype operation.
     * @callback module:api/RepositoryApi~deleteDatatypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single datatype based on the name supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of datatype to delete
     * @param {module:api/RepositoryApi~deleteDatatypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDatatype(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteDatatype");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteDatatype");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteDatatype");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/datatypes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteField operation.
     * @callback module:api/RepositoryApi~deleteFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single field based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of field to delete
     * @param {module:api/RepositoryApi~deleteFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteField(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteField");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteField");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteField");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/fields/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/RepositoryApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single group based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of group to delete
     * @param {module:api/RepositoryApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteGroup");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteGroup");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroup");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessage operation.
     * @callback module:api/RepositoryApi~deleteMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single message scenario based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message to delete
     * @param {module:api/RepositoryApi~deleteMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessage(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteMessage");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteMessage");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMessage");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/RepositoryApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single Orchestra repository based on the ID supplied
     * @param {String} reposName name of Orchestra repository to delete
     * @param {String} version version of Orchestra repository to delete
     * @param {module:api/RepositoryApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepository(reposName, version, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteRepository");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteRepository");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadRepositoryById operation.
     * @callback module:api/RepositoryApi~downloadRepositoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retreives a single Orchestra repository file, if found
     * Support XML or JSON serialization (to-do)
     * @param {String} reposName name of Orchestra repository to fetch
     * @param {String} version version of Orchestra repository to fetch
     * @param {module:api/RepositoryApi~downloadRepositoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadRepositoryById(reposName, version, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling downloadRepositoryById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling downloadRepositoryById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/xml'];
      let returnType = File;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findCodeById operation.
     * @callback module:api/RepositoryApi~findCodeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Code} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Code, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} codesetid ID of CodeSet
     * @param {Number} id ID of Code to fetch
     * @param {module:api/RepositoryApi~findCodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Code}
     */
    findCodeById(reposName, version, codesetid, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findCodeById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findCodeById");
      }

      // verify the required parameter 'codesetid' is set
      if (codesetid === undefined || codesetid === null) {
        throw new Error("Missing the required parameter 'codesetid' when calling findCodeById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findCodeById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'codesetid': codesetid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Code;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{codesetid}/codes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findCodeSetById operation.
     * @callback module:api/RepositoryApi~findCodeSetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single CodeSet, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of CodeSet to fetch
     * @param {module:api/RepositoryApi~findCodeSetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeSet}
     */
    findCodeSetById(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findCodeSetById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findCodeSetById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findCodeSetById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodeSet;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findComponentById operation.
     * @callback module:api/RepositoryApi~findComponentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single component, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of component to fetch
     * @param {module:api/RepositoryApi~findComponentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    findComponentById(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findComponentById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findComponentById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findComponentById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Component;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/components/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findDatatypeByName operation.
     * @callback module:api/RepositoryApi~findDatatypeByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datatype} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single datatype, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of datatype to fetch
     * @param {module:api/RepositoryApi~findDatatypeByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datatype}
     */
    findDatatypeByName(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findDatatypeByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findDatatypeByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findDatatypeByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Datatype;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/datatypes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFieldById operation.
     * @callback module:api/RepositoryApi~findFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Field} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single field, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of field to fetch
     * @param {module:api/RepositoryApi~findFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Field}
     */
    findFieldById(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findFieldById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findFieldById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findFieldById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Field;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/fields/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroupById operation.
     * @callback module:api/RepositoryApi~findGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single group, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of group to fetch
     * @param {module:api/RepositoryApi~findGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    findGroupById(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findGroupById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findGroupById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findGroupById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findMessageById operation.
     * @callback module:api/RepositoryApi~findMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single message scenario, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message to fetch
     * @param {module:api/RepositoryApi~findMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    findMessageById(reposName, version, id, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findMessageById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findMessageById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findMessageById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findRepositoryById operation.
     * @callback module:api/RepositoryApi~findRepositoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Orchestra repository metadata, if found
     * @param {String} reposName name of Orchestra repository to fetch
     * @param {String} version version of Orchestra repository to fetch
     * @param {module:api/RepositoryApi~findRepositoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    findRepositoryById(reposName, version, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findRepositoryById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findRepositoryById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Repository;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCodeSets operation.
     * @callback module:api/RepositoryApi~searchCodeSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodeSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches CodeSets
     * By passing in the appropriate options, you can search for CodeSets 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up CodeSets
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchCodeSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodeSet>}
     */
    searchCodeSets(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchCodeSets");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchCodeSets");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [CodeSet];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCodes operation.
     * @callback module:api/RepositoryApi~searchCodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Code>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches Codes within a CodeSet
     * By passing in the appropriate options, you can search for Codes
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} codesetid ID of CodeSet
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up Codes
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Code>}
     */
    searchCodes(reposName, version, codesetid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchCodes");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchCodes");
      }

      // verify the required parameter 'codesetid' is set
      if (codesetid === undefined || codesetid === null) {
        throw new Error("Missing the required parameter 'codesetid' when calling searchCodes");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'codesetid': codesetid
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Code];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{codesetid}/codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchComponents operation.
     * @callback module:api/RepositoryApi~searchComponentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Component>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches components
     * By passing in the appropriate options, you can search for components 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up components
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Component>}
     */
    searchComponents(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchComponents");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchComponents");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Component];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDatatypes operation.
     * @callback module:api/RepositoryApi~searchDatatypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Datatype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches datatypes
     * By passing in the appropriate options, you can search for datatypes 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up datatypes
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchDatatypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Datatype>}
     */
    searchDatatypes(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchDatatypes");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchDatatypes");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Datatype];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/datatypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFields operation.
     * @callback module:api/RepositoryApi~searchFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Field>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches fields
     * By passing in the appropriate options, you can search for fields 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up fields
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Field>}
     */
    searchFields(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchFields");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchFields");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Field];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroups operation.
     * @callback module:api/RepositoryApi~searchGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches groups
     * By passing in the appropriate options, you can search for groups 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up groups
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    searchGroups(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchGroups");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchGroups");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Group];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMessages operation.
     * @callback module:api/RepositoryApi~searchMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches messages
     * By passing in the appropriate options, you can search for messages 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up messages
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Message>}
     */
    searchMessages(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchMessages");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchMessages");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Message];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchRepositories operation.
     * @callback module:api/RepositoryApi~searchRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches Orchestra repositories
     * By passing in the appropriate options, you can search for Orchestra repositories
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up repositories
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RepositoryApi~searchRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Repository>}
     */
    searchRepositories(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCodeById operation.
     * @callback module:api/RepositoryApi~updateCodeByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single Code, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} codesetid ID of CodeSet
     * @param {Number} id ID of Code to update
     * @param {module:model/Code} code Code to update
     * @param {module:api/RepositoryApi~updateCodeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCodeById(reposName, version, codesetid, id, code, callback) {
      let postBody = code;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateCodeById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateCodeById");
      }

      // verify the required parameter 'codesetid' is set
      if (codesetid === undefined || codesetid === null) {
        throw new Error("Missing the required parameter 'codesetid' when calling updateCodeById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCodeById");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling updateCodeById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'codesetid': codesetid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{codesetid}/codes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCodeSetById operation.
     * @callback module:api/RepositoryApi~updateCodeSetByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single CodeSet, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of CodeSet to update
     * @param {module:model/CodeSet} codeSet CodeSet to update
     * @param {module:api/RepositoryApi~updateCodeSetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCodeSetById(reposName, version, id, codeSet, callback) {
      let postBody = codeSet;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateCodeSetById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateCodeSetById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCodeSetById");
      }

      // verify the required parameter 'codeSet' is set
      if (codeSet === undefined || codeSet === null) {
        throw new Error("Missing the required parameter 'codeSet' when calling updateCodeSetById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/codesets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComponentById operation.
     * @callback module:api/RepositoryApi~updateComponentByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single component, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of component to update
     * @param {module:model/Component} component component to update
     * @param {module:api/RepositoryApi~updateComponentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateComponentById(reposName, version, id, component, callback) {
      let postBody = component;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateComponentById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateComponentById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComponentById");
      }

      // verify the required parameter 'component' is set
      if (component === undefined || component === null) {
        throw new Error("Missing the required parameter 'component' when calling updateComponentById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/components/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatatypeByName operation.
     * @callback module:api/RepositoryApi~updateDatatypeByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single datatype, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of datatype to update
     * @param {module:model/Datatype} datatype datatype to update
     * @param {module:api/RepositoryApi~updateDatatypeByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDatatypeByName(reposName, version, name, datatype, callback) {
      let postBody = datatype;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateDatatypeByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateDatatypeByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateDatatypeByName");
      }

      // verify the required parameter 'datatype' is set
      if (datatype === undefined || datatype === null) {
        throw new Error("Missing the required parameter 'datatype' when calling updateDatatypeByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/datatypes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldById operation.
     * @callback module:api/RepositoryApi~updateFieldByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single field, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of field to update
     * @param {module:model/Field} field field to update
     * @param {module:api/RepositoryApi~updateFieldByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFieldById(reposName, version, id, field, callback) {
      let postBody = field;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateFieldById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateFieldById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFieldById");
      }

      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling updateFieldById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/fields/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroupById operation.
     * @callback module:api/RepositoryApi~updateGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single group, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of group to update
     * @param {module:model/Group} group group to update
     * @param {module:api/RepositoryApi~updateGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroupById(reposName, version, id, group, callback) {
      let postBody = group;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateGroupById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateGroupById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupById");
      }

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling updateGroupById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessageById operation.
     * @callback module:api/RepositoryApi~updateMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single message scenario, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message to update
     * @param {module:model/Message} message message to update
     * @param {module:api/RepositoryApi~updateMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMessageById(reposName, version, id, message, callback) {
      let postBody = message;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateMessageById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateMessageById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMessageById");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling updateMessageById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryById operation.
     * @callback module:api/RepositoryApi~updateRepositoryByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Orchestra repository, if found (idempotent)
     * @param {String} reposName name of Orchestra repository to update
     * @param {String} version version of Orchestra repository to update
     * @param {module:model/Repository} repository Orchestra repository to update
     * @param {module:api/RepositoryApi~updateRepositoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRepositoryById(reposName, version, repository, callback) {
      let postBody = repository;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateRepositoryById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateRepositoryById");
      }

      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling updateRepositoryById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
