/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Actor from '../model/Actor';
import ErrorModel from '../model/ErrorModel';
import Flow from '../model/Flow';
import Response from '../model/Response';
import StateMachine from '../model/StateMachine';

/**
* Workflow service.
* @module api/WorkflowApi
* @version 1.0.0
*/
export default class WorkflowApi {

    /**
    * Constructs a new WorkflowApi. 
    * @alias module:api/WorkflowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addActor operation.
     * @callback module:api/WorkflowApi~addActorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an Actor
     * Adds an Actor
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Actor} opts.actor Actor to add
     * @param {module:api/WorkflowApi~addActorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addActor(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['actor'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addActor");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addActor");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlow operation.
     * @callback module:api/WorkflowApi~addFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a Flow
     * Adds a Flow
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {module:model/Flow} opts.flow Flow to add
     * @param {module:api/WorkflowApi~addFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFlow(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['flow'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addFlow");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addFlow");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addMessageResponse operation.
     * @callback module:api/WorkflowApi~addMessageResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a response to a message scenario
     * Adds a message scenario response
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message to update
     * @param {Object} opts Optional parameters
     * @param {module:model/Response} opts.response message response to add
     * @param {module:api/WorkflowApi~addMessageResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMessageResponse(reposName, version, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['response'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addMessageResponse");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addMessageResponse");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addMessageResponse");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}/responses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addStateMachine operation.
     * @callback module:api/WorkflowApi~addStateMachineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a state machine
     * Adds a StateMachine
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to update
     * @param {Object} opts Optional parameters
     * @param {module:model/StateMachine} opts.stateMachine StateMachine to add
     * @param {module:api/WorkflowApi~addStateMachineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addStateMachine(reposName, version, name, opts, callback) {
      opts = opts || {};
      let postBody = opts['stateMachine'];

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling addStateMachine");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling addStateMachine");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addStateMachine");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}/statemachines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActor operation.
     * @callback module:api/WorkflowApi~deleteActorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single Actor based on the name supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to delete
     * @param {module:api/WorkflowApi~deleteActorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActor(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteActor");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteActor");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteActor");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlow operation.
     * @callback module:api/WorkflowApi~deleteFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single Flow based on the name supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Flow to delete
     * @param {module:api/WorkflowApi~deleteFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFlow(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteFlow");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteFlow");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteFlow");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/flows/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessageResponse operation.
     * @callback module:api/WorkflowApi~deleteMessageResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single response to a message scenario based on the ID supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message
     * @param {String} name name of message response to delete
     * @param {module:api/WorkflowApi~deleteMessageResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessageResponse(reposName, version, id, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteMessageResponse");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteMessageResponse");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMessageResponse");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteMessageResponse");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}/responses/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStateMachine operation.
     * @callback module:api/WorkflowApi~deleteStateMachineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a single StateMachine based on the name supplied
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to update
     * @param {String} smName name of StateMachine to delete
     * @param {module:api/WorkflowApi~deleteStateMachineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStateMachine(reposName, version, name, smName, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling deleteStateMachine");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteStateMachine");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteStateMachine");
      }

      // verify the required parameter 'smName' is set
      if (smName === undefined || smName === null) {
        throw new Error("Missing the required parameter 'smName' when calling deleteStateMachine");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name,
        'sm-name': smName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}/statemachines/{sm-name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findActorByName operation.
     * @callback module:api/WorkflowApi~findActorByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Actor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Actor, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to fetch
     * @param {module:api/WorkflowApi~findActorByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Actor}
     */
    findActorByName(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findActorByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findActorByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findActorByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Actor;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFlowByName operation.
     * @callback module:api/WorkflowApi~findFlowByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Flow, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Flow to fetch
     * @param {module:api/WorkflowApi~findFlowByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flow}
     */
    findFlowByName(reposName, version, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findFlowByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findFlowByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findFlowByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Flow;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/flows/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findMessageResponseById operation.
     * @callback module:api/WorkflowApi~findMessageResponseByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single response to a message scenario, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message
     * @param {String} name name of message response to fetch
     * @param {module:api/WorkflowApi~findMessageResponseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    findMessageResponseById(reposName, version, id, name, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findMessageResponseById");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findMessageResponseById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findMessageResponseById");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findMessageResponseById");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}/responses/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findStateMachine operation.
     * @callback module:api/WorkflowApi~findStateMachineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StateMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single StateMachine, if found
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to search
     * @param {String} smName name of StateMachine to fetch
     * @param {module:api/WorkflowApi~findStateMachineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StateMachine}
     */
    findStateMachine(reposName, version, name, smName, callback) {
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling findStateMachine");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling findStateMachine");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling findStateMachine");
      }

      // verify the required parameter 'smName' is set
      if (smName === undefined || smName === null) {
        throw new Error("Missing the required parameter 'smName' when calling findStateMachine");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name,
        'sm-name': smName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StateMachine;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}/statemachines/{sm-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchActors operation.
     * @callback module:api/WorkflowApi~searchActorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Actor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches actors
     * By passing in the appropriate options, you can search for actors 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up actors
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/WorkflowApi~searchActorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Actor>}
     */
    searchActors(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchActors");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchActors");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Actor];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFlows operation.
     * @callback module:api/WorkflowApi~searchFlowsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Flow>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches flows
     * By passing in the appropriate options, you can search for flows 
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up flows
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/WorkflowApi~searchFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Flow>}
     */
    searchFlows(reposName, version, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchFlows");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchFlows");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Flow];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchMessageResponses operation.
     * @callback module:api/WorkflowApi~searchMessageResponsesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Response>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches message responses
     * By passing in the appropriate options, you can search for message responses
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message to search
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up responses
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/WorkflowApi~searchMessageResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Response>}
     */
    searchMessageResponses(reposName, version, id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchMessageResponses");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchMessageResponses");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchMessageResponses");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Response];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}/responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchStateMachines operation.
     * @callback module:api/WorkflowApi~searchStateMachinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StateMachine>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches state machines
     * By passing in the appropriate options, you can search for state machines
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to search
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up actors
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/WorkflowApi~searchStateMachinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StateMachine>}
     */
    searchStateMachines(reposName, version, name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling searchStateMachines");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling searchStateMachines");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling searchStateMachines");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [StateMachine];

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}/statemachines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActorByName operation.
     * @callback module:api/WorkflowApi~updateActorByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single Actor, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of CodeSet to update
     * @param {module:model/Actor} actor Actor to update
     * @param {module:api/WorkflowApi~updateActorByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateActorByName(reposName, version, name, actor, callback) {
      let postBody = actor;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateActorByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateActorByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateActorByName");
      }

      // verify the required parameter 'actor' is set
      if (actor === undefined || actor === null) {
        throw new Error("Missing the required parameter 'actor' when calling updateActorByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowByName operation.
     * @callback module:api/WorkflowApi~updateFlowByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single Flow, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Flow to update
     * @param {module:model/Flow} actor Flow to update
     * @param {module:api/WorkflowApi~updateFlowByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFlowByName(reposName, version, name, actor, callback) {
      let postBody = actor;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateFlowByName");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateFlowByName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateFlowByName");
      }

      // verify the required parameter 'actor' is set
      if (actor === undefined || actor === null) {
        throw new Error("Missing the required parameter 'actor' when calling updateFlowByName");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/flows/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessageResponse operation.
     * @callback module:api/WorkflowApi~updateMessageResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single response to a message scenario, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {Number} id ID of message
     * @param {String} name name of message response to update
     * @param {module:model/Response} response message response to update
     * @param {module:api/WorkflowApi~updateMessageResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMessageResponse(reposName, version, id, name, response, callback) {
      let postBody = response;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateMessageResponse");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateMessageResponse");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMessageResponse");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateMessageResponse");
      }

      // verify the required parameter 'response' is set
      if (response === undefined || response === null) {
        throw new Error("Missing the required parameter 'response' when calling updateMessageResponse");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/messages/{id}/responses/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStateMachine operation.
     * @callback module:api/WorkflowApi~updateStateMachineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a single StateMachine, if found (idempotent)
     * @param {String} reposName name of Orchestra repository
     * @param {String} version version of Orchestra repository
     * @param {String} name name of Actor to update
     * @param {String} smName name of StateMachine to update
     * @param {module:model/StateMachine} stateMachine StateMachine to update
     * @param {module:api/WorkflowApi~updateStateMachineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateStateMachine(reposName, version, name, smName, stateMachine, callback) {
      let postBody = stateMachine;

      // verify the required parameter 'reposName' is set
      if (reposName === undefined || reposName === null) {
        throw new Error("Missing the required parameter 'reposName' when calling updateStateMachine");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling updateStateMachine");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateStateMachine");
      }

      // verify the required parameter 'smName' is set
      if (smName === undefined || smName === null) {
        throw new Error("Missing the required parameter 'smName' when calling updateStateMachine");
      }

      // verify the required parameter 'stateMachine' is set
      if (stateMachine === undefined || stateMachine === null) {
        throw new Error("Missing the required parameter 'stateMachine' when calling updateStateMachine");
      }


      let pathParams = {
        'repos-name': reposName,
        'version': version,
        'name': name,
        'sm-name': smName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/repositories/{repos-name}/{version}/actors/{name}/statemachines/{sm-name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
