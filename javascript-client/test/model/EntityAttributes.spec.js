/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrchestraApi);
  }
}(this, function(expect, OrchestraApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrchestraApi.EntityAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EntityAttributes', function() {
    it('should create an instance of EntityAttributes', function() {
      // uncomment below and update the code to test EntityAttributes
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be.a(OrchestraApi.EntityAttributes);
    });

    it('should have the property added (base name: "added")', function() {
      // uncomment below and update the code to test the property added
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property addedEP (base name: "addedEP")', function() {
      // uncomment below and update the code to test the property addedEP
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property changeType (base name: "changeType")', function() {
      // uncomment below and update the code to test the property changeType
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property deprecated (base name: "deprecated")', function() {
      // uncomment below and update the code to test the property deprecated
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property deprecatedEP (base name: "deprecatedEP")', function() {
      // uncomment below and update the code to test the property deprecatedEP
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property issue (base name: "issue")', function() {
      // uncomment below and update the code to test the property issue
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "lastModified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property replaced (base name: "replaced")', function() {
      // uncomment below and update the code to test the property replaced
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property replacedEP (base name: "replacedEP")', function() {
      // uncomment below and update the code to test the property replacedEP
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property replacedByField (base name: "replacedByField")', function() {
      // uncomment below and update the code to test the property replacedByField
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property supported (base name: "supported")', function() {
      // uncomment below and update the code to test the property supported
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

    it('should have the property updatedEP (base name: "updatedEP")', function() {
      // uncomment below and update the code to test the property updatedEP
      //var instane = new OrchestraApi.EntityAttributes();
      //expect(instance).to.be();
    });

  });

}));
