/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrchestraApi);
  }
}(this, function(expect, OrchestraApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrchestraApi.WorkflowApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkflowApi', function() {
    describe('addActor', function() {
      it('should call addActor successfully', function(done) {
        //uncomment below and update the code to test addActor
        //instance.addActor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlow', function() {
      it('should call addFlow successfully', function(done) {
        //uncomment below and update the code to test addFlow
        //instance.addFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMessageResponse', function() {
      it('should call addMessageResponse successfully', function(done) {
        //uncomment below and update the code to test addMessageResponse
        //instance.addMessageResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addStateMachine', function() {
      it('should call addStateMachine successfully', function(done) {
        //uncomment below and update the code to test addStateMachine
        //instance.addStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteActor', function() {
      it('should call deleteActor successfully', function(done) {
        //uncomment below and update the code to test deleteActor
        //instance.deleteActor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlow', function() {
      it('should call deleteFlow successfully', function(done) {
        //uncomment below and update the code to test deleteFlow
        //instance.deleteFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMessageResponse', function() {
      it('should call deleteMessageResponse successfully', function(done) {
        //uncomment below and update the code to test deleteMessageResponse
        //instance.deleteMessageResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStateMachine', function() {
      it('should call deleteStateMachine successfully', function(done) {
        //uncomment below and update the code to test deleteStateMachine
        //instance.deleteStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findActorByName', function() {
      it('should call findActorByName successfully', function(done) {
        //uncomment below and update the code to test findActorByName
        //instance.findActorByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findFlowByName', function() {
      it('should call findFlowByName successfully', function(done) {
        //uncomment below and update the code to test findFlowByName
        //instance.findFlowByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findMessageResponseById', function() {
      it('should call findMessageResponseById successfully', function(done) {
        //uncomment below and update the code to test findMessageResponseById
        //instance.findMessageResponseById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findStateMachine', function() {
      it('should call findStateMachine successfully', function(done) {
        //uncomment below and update the code to test findStateMachine
        //instance.findStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchActors', function() {
      it('should call searchActors successfully', function(done) {
        //uncomment below and update the code to test searchActors
        //instance.searchActors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFlows', function() {
      it('should call searchFlows successfully', function(done) {
        //uncomment below and update the code to test searchFlows
        //instance.searchFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchMessageResponses', function() {
      it('should call searchMessageResponses successfully', function(done) {
        //uncomment below and update the code to test searchMessageResponses
        //instance.searchMessageResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchStateMachines', function() {
      it('should call searchStateMachines successfully', function(done) {
        //uncomment below and update the code to test searchStateMachines
        //instance.searchStateMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateActorByName', function() {
      it('should call updateActorByName successfully', function(done) {
        //uncomment below and update the code to test updateActorByName
        //instance.updateActorByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowByName', function() {
      it('should call updateFlowByName successfully', function(done) {
        //uncomment below and update the code to test updateFlowByName
        //instance.updateFlowByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMessageResponse', function() {
      it('should call updateMessageResponse successfully', function(done) {
        //uncomment below and update the code to test updateMessageResponse
        //instance.updateMessageResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStateMachine', function() {
      it('should call updateStateMachine successfully', function(done) {
        //uncomment below and update the code to test updateStateMachine
        //instance.updateStateMachine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
