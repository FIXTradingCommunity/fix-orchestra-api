/**
 * Orchestra API
 * API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrchestraApi);
  }
}(this, function(expect, OrchestraApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrchestraApi.RepositoryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RepositoryApi', function() {
    describe('addCode', function() {
      it('should call addCode successfully', function(done) {
        //uncomment below and update the code to test addCode
        //instance.addCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCodeSet', function() {
      it('should call addCodeSet successfully', function(done) {
        //uncomment below and update the code to test addCodeSet
        //instance.addCodeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addComponent', function() {
      it('should call addComponent successfully', function(done) {
        //uncomment below and update the code to test addComponent
        //instance.addComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDatatype', function() {
      it('should call addDatatype successfully', function(done) {
        //uncomment below and update the code to test addDatatype
        //instance.addDatatype(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addField', function() {
      it('should call addField successfully', function(done) {
        //uncomment below and update the code to test addField
        //instance.addField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addGroup', function() {
      it('should call addGroup successfully', function(done) {
        //uncomment below and update the code to test addGroup
        //instance.addGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addMessage', function() {
      it('should call addMessage successfully', function(done) {
        //uncomment below and update the code to test addMessage
        //instance.addMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRepository', function() {
      it('should call addRepository successfully', function(done) {
        //uncomment below and update the code to test addRepository
        //instance.addRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCode', function() {
      it('should call deleteCode successfully', function(done) {
        //uncomment below and update the code to test deleteCode
        //instance.deleteCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCodeSet', function() {
      it('should call deleteCodeSet successfully', function(done) {
        //uncomment below and update the code to test deleteCodeSet
        //instance.deleteCodeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteComponent', function() {
      it('should call deleteComponent successfully', function(done) {
        //uncomment below and update the code to test deleteComponent
        //instance.deleteComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDatatype', function() {
      it('should call deleteDatatype successfully', function(done) {
        //uncomment below and update the code to test deleteDatatype
        //instance.deleteDatatype(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteField', function() {
      it('should call deleteField successfully', function(done) {
        //uncomment below and update the code to test deleteField
        //instance.deleteField(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGroup', function() {
      it('should call deleteGroup successfully', function(done) {
        //uncomment below and update the code to test deleteGroup
        //instance.deleteGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMessage', function() {
      it('should call deleteMessage successfully', function(done) {
        //uncomment below and update the code to test deleteMessage
        //instance.deleteMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepository', function() {
      it('should call deleteRepository successfully', function(done) {
        //uncomment below and update the code to test deleteRepository
        //instance.deleteRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadRepositoryById', function() {
      it('should call downloadRepositoryById successfully', function(done) {
        //uncomment below and update the code to test downloadRepositoryById
        //instance.downloadRepositoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findCodeById', function() {
      it('should call findCodeById successfully', function(done) {
        //uncomment below and update the code to test findCodeById
        //instance.findCodeById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findCodeSetById', function() {
      it('should call findCodeSetById successfully', function(done) {
        //uncomment below and update the code to test findCodeSetById
        //instance.findCodeSetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findComponentById', function() {
      it('should call findComponentById successfully', function(done) {
        //uncomment below and update the code to test findComponentById
        //instance.findComponentById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findDatatypeByName', function() {
      it('should call findDatatypeByName successfully', function(done) {
        //uncomment below and update the code to test findDatatypeByName
        //instance.findDatatypeByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findFieldById', function() {
      it('should call findFieldById successfully', function(done) {
        //uncomment below and update the code to test findFieldById
        //instance.findFieldById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findGroupById', function() {
      it('should call findGroupById successfully', function(done) {
        //uncomment below and update the code to test findGroupById
        //instance.findGroupById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findMessageById', function() {
      it('should call findMessageById successfully', function(done) {
        //uncomment below and update the code to test findMessageById
        //instance.findMessageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findRepositoryById', function() {
      it('should call findRepositoryById successfully', function(done) {
        //uncomment below and update the code to test findRepositoryById
        //instance.findRepositoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchCodeSets', function() {
      it('should call searchCodeSets successfully', function(done) {
        //uncomment below and update the code to test searchCodeSets
        //instance.searchCodeSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchCodes', function() {
      it('should call searchCodes successfully', function(done) {
        //uncomment below and update the code to test searchCodes
        //instance.searchCodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchComponents', function() {
      it('should call searchComponents successfully', function(done) {
        //uncomment below and update the code to test searchComponents
        //instance.searchComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchDatatypes', function() {
      it('should call searchDatatypes successfully', function(done) {
        //uncomment below and update the code to test searchDatatypes
        //instance.searchDatatypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchFields', function() {
      it('should call searchFields successfully', function(done) {
        //uncomment below and update the code to test searchFields
        //instance.searchFields(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchGroups', function() {
      it('should call searchGroups successfully', function(done) {
        //uncomment below and update the code to test searchGroups
        //instance.searchGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchMessages', function() {
      it('should call searchMessages successfully', function(done) {
        //uncomment below and update the code to test searchMessages
        //instance.searchMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchRepositories', function() {
      it('should call searchRepositories successfully', function(done) {
        //uncomment below and update the code to test searchRepositories
        //instance.searchRepositories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCodeById', function() {
      it('should call updateCodeById successfully', function(done) {
        //uncomment below and update the code to test updateCodeById
        //instance.updateCodeById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCodeSetById', function() {
      it('should call updateCodeSetById successfully', function(done) {
        //uncomment below and update the code to test updateCodeSetById
        //instance.updateCodeSetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateComponentById', function() {
      it('should call updateComponentById successfully', function(done) {
        //uncomment below and update the code to test updateComponentById
        //instance.updateComponentById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDatatypeByName', function() {
      it('should call updateDatatypeByName successfully', function(done) {
        //uncomment below and update the code to test updateDatatypeByName
        //instance.updateDatatypeByName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFieldById', function() {
      it('should call updateFieldById successfully', function(done) {
        //uncomment below and update the code to test updateFieldById
        //instance.updateFieldById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGroupById', function() {
      it('should call updateGroupById successfully', function(done) {
        //uncomment below and update the code to test updateGroupById
        //instance.updateGroupById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMessageById', function() {
      it('should call updateMessageById successfully', function(done) {
        //uncomment below and update the code to test updateMessageById
        //instance.updateMessageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRepositoryById', function() {
      it('should call updateRepositoryById successfully', function(done) {
        //uncomment below and update the code to test updateRepositoryById
        //instance.updateRepositoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadRepositoryById', function() {
      it('should call uploadRepositoryById successfully', function(done) {
        //uncomment below and update the code to test uploadRepositoryById
        //instance.uploadRepositoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadRepositoryForUpdateById', function() {
      it('should call uploadRepositoryForUpdateById successfully', function(done) {
        //uncomment below and update the code to test uploadRepositoryForUpdateById
        //instance.uploadRepositoryForUpdateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
