swagger: "2.0"
info:
  description: "API to edit FIX Orchestra (machine readable rules of engagement) specification version 1.0 RC3"
  version: "1.0.0"
  title: "Orchestra API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/FIXTradingCommunity/orchestra-api/1.0.0"
tags:
- name: "repository"
  description: "Message structure operations"
- name: "workflow"
  description: "Actors and actions"
- name: "documentation"
  description: "Documentation of repository or workflow elements"
schemes:
- "https"
paths:
  /repositories:
    get:
      tags:
      - "repository"
      summary: "searches Orchestra repositories"
      description: "By passing in the appropriate options, you can search for Orchestra repositories"
      operationId: "searchRepositories"
      produces:
      - "application/json"
      parameters:
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up repositories"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds an Orchestra repository"
      description: "Adds an Orchestra repository"
      operationId: "addRepository"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "repository"
        description: "Orchestra repository to add"
        required: true
        schema:
          $ref: "#/definitions/Repository"
      - name: "nameToClone"
        in: "query"
        description: "name of Orchestra repository to clone"
        required: false
        type: "string"
      - name: "versionToClone"
        in: "query"
        description: "version of Orchestra repository to clone"
        required: false
        type: "string"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}:
    get:
      tags:
      - "repository"
      summary: "Returns a single Orchestra repository metadata, if found"
      operationId: "findRepositoryById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to fetch"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "repository response"
          schema:
            $ref: "#/definitions/Repository"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates an Orchestra repository, if found (idempotent)"
      operationId: "updateRepositoryById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to update"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to update"
        required: true
        type: "string"
      - in: "body"
        name: "repository"
        description: "Orchestra repository to update"
        required: true
        schema:
          $ref: "#/definitions/Repository"
      responses:
        204:
          description: "repository updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single Orchestra repository based on the ID supplied"
      operationId: "deleteRepository"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to delete"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "repository deleted"
        404:
          description: "repository not found"
  /repositories/{repos-name}/{version}/file:
    get:
      tags:
      - "repository"
      summary: "Retreives a single Orchestra repository file, if found"
      operationId: "downloadRepositoryById"
      produces:
      - "application/xml"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to fetch"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "repository file"
          schema:
            type: "file"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
  /repositories/{repos-name}/{version}/actors:
    get:
      tags:
      - "workflow"
      summary: "searches actors"
      description: "By passing in the appropriate options, you can search for actors "
      operationId: "searchActors"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true         
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up actors"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Actor"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "workflow"
      summary: "adds an Actor"
      description: "Adds an Actor"
      operationId: "addActor"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - in: "body"
        name: "actor"
        description: "Actor to add"
        required: false
        schema:
          $ref: "#/definitions/Actor"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/actors/{name}:
    get:
      tags:
      - "workflow"
      summary: "Returns a single Actor, if found"
      operationId: "findActorByName"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of Actor to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "Actor response"
          schema:
            $ref: "#/definitions/Actor"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "workflow"
      summary: "Updates a single Actor, if found (idempotent)"
      operationId: "updateActorByName"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of CodeSet to update"
        required: true
        type: "string"
      - in: "body"
        name: "actor"
        description: "Actor to update"
        required: true
        schema:
          $ref: "#/definitions/Actor"
      responses:
        204:
          description: "Actor updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "workflow"
      summary: "deletes a single Actor based on the name supplied"
      operationId: "deleteActor"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of Actor to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "Actor deleted"
        404:
          description: "Actor not found"
  /repositories/{repos-name}/{version}/actors/{name}/statemachines:
    get:
      tags:
      - "workflow"
      summary: "searches state machines"
      description: "By passing in the appropriate options, you can search for state machines"
      operationId: "searchStateMachines"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true        
      - name: "name"
        in: "path"
        description: "name of Actor to search"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up actors"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StateMachine"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "workflow"
      summary: "adds a state machine"
      description: "Adds a StateMachine"
      operationId: "addStateMachine"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"  
      - name: "name"
        in: "path"
        description: "name of Actor to update"
        required: true
        type: "string"
      - in: "body"
        name: "stateMachine"
        description: "StateMachine to add"
        required: false
        schema:
          $ref: "#/definitions/StateMachine"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/actors/{name}/statemachines/{sm-name}:
    get:
      tags:
      - "workflow"
      summary: "Returns a single StateMachine, if found"
      operationId: "findStateMachine"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of Actor to search"
        required: true
        type: "string"
      - name: "sm-name"
        in: "path"
        description: "name of StateMachine to fetch"
        required: true
        type: "string"        
      responses:
        200:
          description: "StateMachine response"
          schema:
            $ref: "#/definitions/StateMachine"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "workflow"
      summary: "Updates a single StateMachine, if found (idempotent)"
      operationId: "updateStateMachine"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of Actor to update"
        required: true
        type: "string"
      - name: "sm-name"
        in: "path"
        description: "name of StateMachine to update"
        required: true
        type: "string"             
      - in: "body"
        name: "stateMachine"
        description: "StateMachine to update"
        required: true
        schema:
          $ref: "#/definitions/StateMachine"
      responses:
        204:
          description: "StateMachine updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "workflow"
      summary: "deletes a single StateMachine based on the name supplied"
      operationId: "deleteStateMachine"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of Actor to update"
        required: true
        type: "string"
      - name: "sm-name"
        in: "path"
        description: "name of StateMachine to delete"
        required: true
        type: "string"             
      responses:
        204:
          description: "StateMachine deleted"
        404:
          description: "StateMachine not found"          
  /repositories/{repos-name}/{version}/codesets/{codesetid}/codes:
    get:
      tags:
      - "repository"
      summary: "searches Codes within a CodeSet"
      description: "By passing in the appropriate options, you can search for Codes"
      operationId: "searchCodes"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up Codes"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Code"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a Code to CodeSet"
      description: "Adds a Code"
      operationId: "addCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true        
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "Code"
        description: "Code to add"
        required: false
        schema:
          $ref: "#/definitions/Code"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/codesets/{codesetid}/codes/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single Code, if found"
      operationId: "findCodeById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Code response"
          schema:
            $ref: "#/definitions/Code"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single Code, if found (idempotent)"
      operationId: "updateCodeById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true         
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "Code"
        description: "Code to update"
        required: true
        schema:
          $ref: "#/definitions/Code"
      responses:
        204:
          description: "Code updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single Code based on the ID supplied"
      operationId: "deleteCode"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true         
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "Code deleted"
        404:
          description: "Code not found"
  /repositories/{repos-name}/{version}/codesets:
    get:
      tags:
      - "repository"
      summary: "searches CodeSets"
      description: "By passing in the appropriate options, you can search for CodeSets "
      operationId: "searchCodeSets"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true         
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up CodeSets"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CodeSet"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a CodeSet"
      description: "Adds a CodeSet"
      operationId: "addCodeSet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - in: "body"
        name: "CodeSet"
        description: "CodeSet to add"
        required: false
        schema:
          $ref: "#/definitions/CodeSet"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/codesets/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single CodeSet, if found"
      operationId: "findCodeSetById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of CodeSet to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "CodeSet response"
          schema:
            $ref: "#/definitions/CodeSet"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single CodeSet, if found (idempotent)"
      operationId: "updateCodeSetById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "id"
        in: "path"
        description: "ID of CodeSet to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "CodeSet"
        description: "CodeSet to update"
        required: true
        schema:
          $ref: "#/definitions/CodeSet"
      responses:
        204:
          description: "CodeSet updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single CodeSet based on the ID supplied"
      operationId: "deleteCodeSet"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "id"
        in: "path"
        description: "ID of CodeSet to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "CodeSet deleted"
        404:
          description: "CodeSet not found"
  /repositories/{repos-name}/{version}/components:
    get:
      tags:
      - "repository"
      summary: "searches components"
      description: "By passing in the appropriate options, you can search for components "
      operationId: "searchComponents"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up components"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a component"
      description: "Adds a component"
      operationId: "addComponent"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - in: "body"
        name: "component"
        description: "Component to add"
        required: false
        schema:
          $ref: "#/definitions/Component"
      - name: "toClone"
        in: "query"
        description: "ID of component to clone"
        required: false
        type: "integer"
        format: "int32"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/components/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single component, if found"
      operationId: "findComponentById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of component to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "component response"
          schema:
            $ref: "#/definitions/Component"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single component, if found (idempotent)"
      operationId: "updateComponentById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of component to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "component"
        description: "component to update"
        required: true
        schema:
          $ref: "#/definitions/Component"
      responses:
        204:
          description: "component updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single component based on the ID supplied"
      operationId: "deleteComponent"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of component to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "component deleted"
        404:
          description: "component not found"
  /repositories/{repos-name}/{version}/datatypes:
    get:
      tags:
      - "repository"
      summary: "searches datatypes"
      description: "By passing in the appropriate options, you can search for datatypes "
      operationId: "searchDatatypes"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up datatypes"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Datatype"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a datatype"
      description: "Adds a datatype"
      operationId: "addDatatype"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - in: "body"
        name: "datatype"
        description: "Datatype to add"
        required: false
        schema:
          $ref: "#/definitions/Datatype"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/datatypes/{name}:
    get:
      tags:
      - "repository"
      summary: "Returns a single datatype, if found"
      operationId: "findDatatypeByName"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of datatype to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "datatype response"
          schema:
            $ref: "#/definitions/Datatype"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single datatype, if found (idempotent)"
      operationId: "updateDatatypeByName"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "name"
        in: "path"
        description: "name of datatype to update"
        required: true
        type: "string"
      - in: "body"
        name: "datatype"
        description: "datatype to update"
        required: true
        schema:
          $ref: "#/definitions/Datatype"
      responses:
        204:
          description: "datatype updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single datatype based on the name supplied"
      operationId: "deleteDatatype"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "name"
        in: "path"
        description: "name of datatype to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "datatype deleted"
        404:
          description: "datatype not found"
  /repositories/{repos-name}/{version}/fields:
    get:
      tags:
      - "repository"
      summary: "searches fields"
      description: "By passing in the appropriate options, you can search for fields "
      operationId: "searchFields"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up fields"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Field"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a field"
      description: "Adds a field"
      operationId: "addField"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - in: "body"
        name: "field"
        description: "field to add"
        required: false
        schema:
          $ref: "#/definitions/Field"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/fields/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single field, if found"
      operationId: "findFieldById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of field to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "field response"
          schema:
            $ref: "#/definitions/Field"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single field, if found (idempotent)"
      operationId: "updateFieldById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of field to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "field"
        description: "field to update"
        required: true
        schema:
          $ref: "#/definitions/Field"
      responses:
        204:
          description: "field updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single field based on the ID supplied"
      operationId: "deleteField"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of field to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "field deleted"
        404:
          description: "field not found"
  /repositories/{repos-name}/{version}/flows:
    get:
      tags:
      - "workflow"
      summary: "searches flows"
      description: "By passing in the appropriate options, you can search for flows "
      operationId: "searchFlows"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true         
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up flows"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Flow"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "workflow"
      summary: "adds a Flow"
      description: "Adds a Flow"
      operationId: "addFlow"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - in: "body"
        name: "flow"
        description: "Flow to add"
        required: false
        schema:
          $ref: "#/definitions/Flow"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/flows/{name}:
    get:
      tags:
      - "workflow"
      summary: "Returns a single Flow, if found"
      operationId: "findFlowByName"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of Flow to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "Flow response"
          schema:
            $ref: "#/definitions/Flow"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "workflow"
      summary: "Updates a single Flow, if found (idempotent)"
      operationId: "updateFlowByName"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of Flow to update"
        required: true
        type: "string"
      - in: "body"
        name: "actor"
        description: "Flow to update"
        required: true
        schema:
          $ref: "#/definitions/Flow"
      responses:
        204:
          description: "Flow updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "workflow"
      summary: "deletes a single Flow based on the name supplied"
      operationId: "deleteFlow"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "name"
        in: "path"
        description: "name of Flow to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "Flow deleted"
        404:
          description: "Flow not found"
  /repositories/{repos-name}/{version}/groups:
    get:
      tags:
      - "repository"
      summary: "searches groups"
      description: "By passing in the appropriate options, you can search for groups "
      operationId: "searchGroups"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up groups"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: array
            items:
              $ref: "#/definitions/Group"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a repeating group"
      description: "Adds a group"
      operationId: "addGroup"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - in: "body"
        name: "group"
        description: "Group to add"
        required: false
        schema:
          $ref: "#/definitions/Group"
      - name: "toClone"
        in: "query"
        description: "ID of group to clone"
        required: false
        type: "integer"
        format: "int32"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/groups/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single group, if found"
      operationId: "findGroupById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of group to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "group response"
          schema:
            $ref: "#/definitions/Group"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single group, if found (idempotent)"
      operationId: "updateGroupById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of group to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "group"
        description: "group to update"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses:
        204:
          description: "group updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single group based on the ID supplied"
      operationId: "deleteGroup"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of group to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "group deleted"
        404:
          description: "group not found"
  /repositories/{repos-name}/{version}/messages:
    get:
      tags:
      - "repository"
      summary: "searches messages"
      description: "By passing in the appropriate options, you can search for messages "
      operationId: "searchMessages"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up messages"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a message scenario"
      description: "Adds a message scenario"
      operationId: "addMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - in: "body"
        name: "message"
        description: "message to add"
        required: false
        schema:
          $ref: "#/definitions/Message"
      - name: "toClone"
        in: "query"
        description: "ID of message to clone"
        required: false
        type: "integer"
        format: "int32"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/messages/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single message scenario, if found"
      operationId: "findMessageById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "message response"
          schema:
            $ref: "#/definitions/Message"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single message scenario, if found (idempotent)"
      operationId: "updateMessageById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of message to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "message"
        description: "message to update"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        204:
          description: "message updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single message scenario based on the ID supplied"
      operationId: "deleteMessage"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of message to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "message deleted"
        404:
          description: "message not found"
  /repositories/{repos-name}/{version}/messages/{id}/responses:
    get:
      tags:
      - "workflow"
      summary: "searches message responses"
      description: "By passing in the appropriate options, you can search for message responses"
      operationId: "searchMessageResponses"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message to search"
        required: true
        type: "integer"        
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up responses"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Response"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "workflow"
      summary: "adds a response to a message scenario"
      description: "Adds a message scenario response"
      operationId: "addMessageResponse"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"  
      - name: "id"
        in: "path"
        description: "ID of message to update"
        required: true
        type: "integer"        
      - in: "body"
        name: "response"
        description: "message response to add"
        required: false
        schema:
          $ref: "#/definitions/Response"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/messages/{id}/responses/{name}:
    get:
      tags:
      - "workflow"
      summary: "Returns a single response to a message scenario, if found"
      operationId: "findMessageResponseById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message"
        required: true
        type: "integer"
        format: "int32"        
      - name: "name"
        in: "path"
        description: "name of message response to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "message response"
          schema:
            $ref: "#/definitions/Response"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "workflow"
      summary: "Updates a single response to a message scenario, if found (idempotent)"
      operationId: "updateMessageResponse"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message"
        required: true
        type: "integer"
        format: "int32"        
      - name: "name"
        in: "path"
        description: "name of message response to update"
        required: true
        type: "string"
      - in: "body"
        name: "response"
        description: "message response to update"
        required: true
        schema:
          $ref: "#/definitions/Response"
      responses:
        204:
          description: "message response updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "workflow"
      summary: "deletes a single response to a message scenario based on the ID supplied"
      operationId: "deleteMessageResponse"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"            
      - name: "id"
        in: "path"
        description: "ID of message"
        required: true
        type: "integer"
        format: "int32"
      - name: "name"
        in: "path"
        description: "name of message response to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "message response deleted"
        404:
          description: "message not found"      
  /repositories/{repos-name}/{version}/annotations:
    get:
      tags:
      - "documentation"
      summary: "searches annotations"
      description: "By passing in the appropriate options, you can search for annotations"
      operationId: "searchAnnotations"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        type: "string"
        required: true      
      - name: "elementId"
        in: "query"
        type: "string"
        required: true
        description: "name or ID as a string of the element to annotate"
      - name: "parentId"
        in: "query"
        type: "string"
        description: "name or ID as a string of the parent of the element to annotate. Required for code, actor, stateMachine."
      - name: "elementType"
        in: "query"
        type: "string"
        description: "type of element to annotate"
        required: true
        enum:
        - code
        - codeSet
        - component
        - datatype
        - field
        - group
        - message
        - actor
        - flow
        - response
        - stateMachine
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up annotations"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            $ref: "#/definitions/Annotation"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "documentation"
      summary: "adds an Annotation"
      description: "Adds an Annotation"
      operationId: "addAnnotation"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string" 
      - name: "elementId"
        in: "query"
        type: "string"
        required: true
        description: "name or ID as a string of the element to annotate"
      - name: "parentId"
        in: "query"
        type: "string"
        description: "name or ID as a string of the parent of the element to annotate. Required for code, actor, stateMachine."
      - name: "elementType"
        in: "query"
        type: "string"
        description: "type of element to annotate"
        required: true
        enum:
        - code
        - codeSet
        - component
        - datatype
        - field
        - group
        - message
        - actor
        - flow
        - response
        - stateMachine
      - in: "body"
        name: "annotation"
        description: "Annotation to add"
        required: false
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
    put:
      tags:
      - "documentation"
      summary: "Updates a single Annotation, if found (idempotent)"
      operationId: "updateAnnotation"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "elementId"
        in: "query"
        type: "string"
        required: true
        description: "name or ID as a string of the element to annotate"
      - name: "parentId"
        in: "query"
        type: "string"
        description: "name or ID as a string of the parent of the element to annotate. Required for code, actor, stateMachine."
      - name: "elementType"
        in: "query"
        type: "string"
        description: "type of element to annotate"
        required: true
        enum:
        - code
        - codeSet
        - component
        - datatype
        - field
        - group
        - message
        - actor
        - flow
        - response
        - stateMachine
      - name: "annotation"
        in: "body"
        description: "Annotation to update"
        required: true
        schema:
          $ref: "#/definitions/Annotation"
      responses:
        204:
          description: "Annotation updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "documentation"
      summary: "deletes a single Annotation"
      operationId: "deleteAnnotation"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"        
      - name: "elementId"
        in: "query"
        type: "string"
        required: true
        description: "name or ID as a string of the element to annotate"
      - name: "parentId"
        in: "query"
        type: "string"
        description: "name or ID as a string of the parent of the element to annotate. Required for code, actor, stateMachine."
      - name: "elementType"
        in: "query"
        type: "string"
        description: "type of element to annotate"
        required: true
        enum:
        - code
        - codeSet
        - component
        - datatype
        - field
        - group
        - message
        - actor
        - flow
        - response
        - stateMachine
      responses:
        204:
          description: "Annotation deleted"
        404:
          description: "Annotation not found"
definitions:
  Actor:
    type: "object"
    description: "Represents a class of participants"
    required:
    - name
    properties:
      name:
        type: "string"
        description: "unique name"
        maxLength: 64
      extends:
        type: "string"
        description: "Inherits properties from another Actor"
        maxLength: 64
      structure:
        description: "State variables"
        $ref: "#/definitions/Structure"        
      annotation:
        $ref: "#/definitions/Annotation"        
  Annotation:
    type: "object"
    properties:
      appinfo:
        type: "array"
        items:
          $ref: "#/definitions/Appinfo"
      documentation:
        type: "array"
        items:
          $ref: "#/definitions/Documentation"
  Appinfo:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
      specURL:
        type: "string"
        format: "uri"
      langId:
        type: "string"
        example: "en"
        description: "a language code (ISO 639-1)"
      purpose:
        type: "string"
        example: "SYNOPSIS"
    description: "Usage specific annotation, optionally with link to an external reference\
      \ or standard"
  Code:
    type: "object"
    required:
    - "oid"
    - "value"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      value:
        type: "string"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  CodeSet:
    type: "object"
    required:
    - "oid"
    - "type"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      type:
        type: "string"
      specURL:
        type: "string"
        format: "uri"
      default:
        type: "string"
      codes:
        type: "array"
        items:
          $ref: "#/definitions/Code"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  Component:
    allOf:
    - $ref: "#/definitions/MessageElement"
    - type: "object"
      required:
      - structure
      properties:
        structure:
          $ref: "#/definitions/Structure"
  ComponentRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
  Documentation:
    type: "object"
    required:
    - "text"
    properties:
      text:
        type: "string"
        description: "text of Documentation"
      langId:
        type: "string"
        example: "en"
        description: "a language code (ISO 639-1)"
      purpose:
        type: "string"
        example: "SYNOPSIS"
  Datatype:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      baseType:
        type: "string"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  EntityAttributes:
    type: "object"
    properties:
      added:
        type: "string"
      addedEP:
        type: "integer"
      changeType:
        type: "string"
        enum:
        - "Editorial"
        - "Definitional"
      deprecated:
        type: "string"
      deprecatedEP:
        type: "integer"
      issue:
        type: "string"
      lastModified:
        type: "string"
      replaced:
        type: "string"
      replacedEP:
        type: "integer"
      replacedByField:
        type: "integer"
      supported:
        type: "string"
        enum:
        - "supported"
        - "forbidden"
        - "ignored"
        default: "supported"
      updated:
        type: "string"
      updatedEP:
        type: "integer"
    description: "element metadata including pedigree"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  Field:
    allOf:
    - $ref: "#/definitions/MessageElement"
    - type: "object"
      required:
      - "type"
      properties:
        type:
          type: "string"
  FieldRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
  ElementRef:
    type: "object"
    required:
    - "oid"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
      category:
        type: "string"
  Flow:
    type: "object"
    description: "A stream of messages in one direction"
    required:
    - name
    - source
    - destination
    properties:
      name:
        type: "string"
        description: "unique flow name"
        maxLength: 64  
      source:
        type: "string"
        description: "Name of the actor that originates messages"
        maxLength: 64   
      destination:
        type: "string"
        description: "Name of the actor that receives messages"
        maxLength: 64   
      annotation:
        $ref: "#/definitions/Annotation"         
  Group:
    allOf:
    - $ref: "#/definitions/Component"
    - type: "object"
      required:
      - "groupProperties"
      properties:
        groupProperties:
          $ref: "#/definitions/GroupProperties"
  GroupProperties:
    type: "object"
    required:
    - "numInGroupId"
    - "numInGroupName"
    properties:
      numInGroupId:
        type: "integer"
      numInGroupName:
        type: "string"
      implMinOccurs:
        type: "integer"
      implMaxOccurs:
        type: "integer"
  GroupRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
  Message:
    type: "object"
    required:
    - oid
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      scenario:
        type: "string"
        description: "Use case of a message type"
        maxLength: 64
        default: "base"
      extends:
        type: "string"
        description: "Inherits properties from another scenario"
        maxLength: 64
      flow:
        type: "string"
        description: "A stream of messages between actors"
        maxLength: 64
      msgType:
        type: "string"
        maxLength: 2
      category:
        type: "string"
      structure:
        $ref: "#/definitions/Structure"
      responses:
        type: "array"
        items:
          $ref: "#/definitions/Response"
  MessageElement:
    type: "object"
    required:
    - "oid"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
      category:
        type: "string"
  MessageRef:
    type: "object"
    required:
    - name
    properties:
      name:
        type: "string"
        maxLength: 64
      msgType:
        type: "string"
        maxLength: 2
      scenario:
        type: "string"
        description: "Use case of a message type"
        maxLength: 64
        default: "base"
  Metadata:
    type: "object"
    required:
    - "identifier"
    properties:
      identifier:
        type: "string"
        description: "unique ID of an Orchestra repository"
      contributor:
        type: "string"
      coverage:
        type: "string"
        example: "SingleGeneralOrderHandling"
        description: "a FIX category or guideline"
      creator:
        type: "string"
      date:
        type: "string"
        format: "date"
        description: "when the file was produced"
      description:
        type: "string"
        description: "a summary"
      format:
        type: "string"
        description: "file format"
      language:
        type: "string"
      relation:
        type: "string"
        description: "a related resource"
      rights:
        type: "string"
      publisher:
        type: "string"
        example: "FIX Trading Community"
      source:
        type: "string"
        description: "a resource from which this one was derived"
      subject:
        type: "string"
      title:
        type: "string"
      type:
        type: "string"
    description: "description of an Orchestra repository, conforms to Dublin Core Terms"
  ObjectId:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      name:
        type: "string"
        example: "Account"
        description: "Name, unique within a file"
        maxLength: 64
      id:
        type: "integer"
        format: "int32"
        example: 1
        description: "Numeric ID, unique within a file, e.g. a field tag"
      abbrName:
        type: "string"
        example: "Acct"
        description: "Short name"
        maxLength: 64
      oid:
        type: "string"
        description: "Globally unique object identifier, a URI or UUID"
  Repository:
    type: "object"
    required:
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "Stable name that does not change with minor version updates"
      version:
        type: "string"
      oid:
        type: "string"
        description: "Globally unique object identifier, a URI or UUID"
      specURL:
        type: "string"
        format: "uri"
        description: "Reference documentation"
      namespace:
        type: "string"
        format: "uri"
        description: "Associated schema namespace"
      hasComponents:
        type: "boolean"
      metadata:
        $ref: "#/definitions/Metadata"
  Response:
    type: "object"
    required:
    - name
    properties:
      name:
        type: string
        maxLength: 64
      when:
        type: string
        description: "conditional expression; if not present, then response is unconditional"
      messageRef:
        $ref: "#/definitions/MessageRef" 
        description: "send a response message"
      assign:
        type: string
        description: "assignment expression"
      trigger:
        $ref: "#/definitions/Trigger" 
      annotation:
        $ref: "#/definitions/Annotation" 
  StateMachine:
    type: "object"
    required:
    - name
    properties:
      name:
        type: string
        maxLength: 64
      initial:
        $ref: "#/definitions/State"
      states:
        type: array
        items:
          $ref: "#/definitions/State"
      annotation:
        $ref: "#/definitions/Annotation"          
  State:
    type: "object"
    required:
    - name
    properties:
      name:
        type: string
        maxLength: 64
      transitions:
        type: array
        items:
          $ref: "#/definitions/Transition"
      annotation:
        $ref: "#/definitions/Annotation" 
  Transition:
    type: "object"
    properties:
      name:
        type: "string"
      when:
        type: string
        description: "Optional guard condition"
      target:
        type: string
        maxLength: 64
        description: "name of the target state"
      annotation:
        $ref: "#/definitions/Annotation" 
  Trigger:
    type: object
    required:
    - stateMachine
    - actor
    - name
    properties:
      stateMachine:
        type: string
        description: "name of StateMachine"
      actor:
        type: string
        description: "name of the Actor that owns the StateMachine"
      name:
        type: string
        description: "name of Transition to invoke"
  Structure:
    properties:
      fields:
        type: "array"
        items:
          $ref: "#/definitions/FieldRef"
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentRef"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/GroupRef"