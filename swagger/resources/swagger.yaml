---
swagger: "2.0"
info:
  description: "API to edit FIX Orchestra (machine readable rules of engagement) specification\
    \ version 1.0 RC3"
  version: "1.0.0"
  title: "Orchestra API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/FIXTradingCommunity/orchestra-api/1.0.0"
tags:
- name: "repository"
  description: "Message structure operations"
schemes:
- "https"
paths:
  /repositories:
    get:
      tags:
      - "repository"
      summary: "searches Orchestra repositories"
      description: "By passing in the appropriate options, you can search for Orchestra\
        \ repositories"
      operationId: "searchRepositories"
      produces:
      - "application/json"
      parameters:
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up components"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds an Orchestra repository"
      description: "Adds an Orchestra repository"
      operationId: "addRepository"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "repository"
        description: "Orchestra repository to add"
        required: true
        schema:
          $ref: "#/definitions/Repository"
      - name: "nameToClone"
        in: "query"
        description: "name of Orchestra repository to clone"
        required: false
        type: "string"
      - name: "versionToClone"
        in: "query"
        description: "version of Orchestra repository to clone"
        required: false
        type: "string"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}:
    get:
      tags:
      - "repository"
      summary: "Returns a single Orchestra repository metadata, if found"
      operationId: "findRepositoryById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to fetch"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "repository response"
          schema:
            $ref: "#/definitions/Repository"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates an Orchestra repository, if found (idempotent)"
      operationId: "updateRepositoryById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to update"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to update"
        required: true
        type: "string"
      - in: "body"
        name: "repository"
        description: "Orchestra repository to update"
        required: true
        schema:
          $ref: "#/definitions/Repository"
      responses:
        204:
          description: "repository updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single Orchestra repository  based on the ID supplied"
      operationId: "deleteRepository"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to delete"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "repository deleted"
        404:
          description: "repository not found"
  /repositories/{repos-name}/{version}/file:
    get:
      tags:
      - "repository"
      summary: "Retreives a single Orchestra repository file, if found"
      operationId: "downloadRepositoryById"
      produces:
      - "application/xml"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository to fetch"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "repository file"
          schema:
            type: "file"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
  /repositories/{repos-name}/{version}/codesets/{codesetid}/codes:
    get:
      tags:
      - "repository"
      summary: "searches Codes within a CodeSet"
      description: "By passing in the appropriate options, you can search for Codes"
      operationId: "searchCodes"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up Codes"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Code"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a Code to CodeSet"
      description: "Adds a Code"
      operationId: "addCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "Code"
        description: "Code to add"
        required: false
        schema:
          $ref: "#/definitions/Code"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/codesets/{codesetid}/codes/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single Code, if found"
      operationId: "findCodeById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Code response"
          schema:
            $ref: "#/definitions/Code"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single Code, if found (idempotent)"
      operationId: "updateCodeById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "Code"
        description: "Code to update"
        required: true
        schema:
          $ref: "#/definitions/Code"
      responses:
        204:
          description: "Code updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single Code based on the ID supplied"
      operationId: "deleteCode"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "codesetid"
        in: "path"
        description: "ID of CodeSet"
        required: true
        type: "integer"
        format: "int32"
      - name: "id"
        in: "path"
        description: "ID of Code to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "Code deleted"
        404:
          description: "Code not found"
  /repositories/{repos-name}/{version}/codesets:
    get:
      tags:
      - "repository"
      summary: "searches CodeSets"
      description: "By passing in the appropriate options, you can search for CodeSets "
      operationId: "searchCodeSets"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up CodeSets"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CodeSet"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a CodeSet"
      description: "Adds a CodeSet"
      operationId: "addCodeSet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - in: "body"
        name: "CodeSet"
        description: "CodeSet to add"
        required: false
        schema:
          $ref: "#/definitions/CodeSet"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/codesets/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single CodeSet, if found"
      operationId: "findCodeSetById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of CodeSet to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "CodeSet response"
          schema:
            $ref: "#/definitions/CodeSet"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single CodeSet, if found (idempotent)"
      operationId: "updateCodeSetById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of CodeSet to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "CodeSet"
        description: "CodeSet to update"
        required: true
        schema:
          $ref: "#/definitions/CodeSet"
      responses:
        204:
          description: "CodeSet updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single CodeSet based on the ID supplied"
      operationId: "deleteCodeSet"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of CodeSet to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "CodeSet deleted"
        404:
          description: "CodeSet not found"
  /repositories/{repos-name}/{version}/components:
    get:
      tags:
      - "repository"
      summary: "searches components"
      description: "By passing in the appropriate options, you can search for components "
      operationId: "searchComponents"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up components"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Component"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a component"
      description: "Adds a component"
      operationId: "addComponent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - in: "body"
        name: "component"
        description: "Component to add"
        required: false
        schema:
          $ref: "#/definitions/Component"
      - name: "toClone"
        in: "query"
        description: "ID of component to clone"
        required: false
        type: "integer"
        format: "int32"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/components/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single component, if found"
      operationId: "findComponentById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of component to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "component response"
          schema:
            $ref: "#/definitions/Component"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single component, if found (idempotent)"
      operationId: "updateComponentById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of component to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "component"
        description: "component to update"
        required: true
        schema:
          $ref: "#/definitions/Component"
      responses:
        204:
          description: "component updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single component based on the ID supplied"
      operationId: "deleteComponent"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of component to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "component deleted"
        404:
          description: "component not found"
  /repositories/{repos-name}/{version}/datatypes:
    get:
      tags:
      - "repository"
      summary: "searches datatypes"
      description: "By passing in the appropriate options, you can search for datatypes "
      operationId: "searchDatatypes"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up datatypes"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Datatype"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a datatype"
      description: "Adds a datatype"
      operationId: "addDatatype"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - in: "body"
        name: "datatype"
        description: "Datatype to add"
        required: false
        schema:
          $ref: "#/definitions/Datatype"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/datatypes/{name}:
    get:
      tags:
      - "repository"
      summary: "Returns a single datatype, if found"
      operationId: "findDatatypeByName"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of datatype to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "datatype response"
          schema:
            $ref: "#/definitions/Datatype"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single datatype, if found (idempotent)"
      operationId: "updateDatatypeByName"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of datatype to update"
        required: true
        type: "string"
      - in: "body"
        name: "datatype"
        description: "datatype to update"
        required: true
        schema:
          $ref: "#/definitions/Datatype"
      responses:
        204:
          description: "datatype updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single datatype based on the name supplied"
      operationId: "deleteDatatype"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name of datatype to delete"
        required: true
        type: "string"
      responses:
        204:
          description: "datatype deleted"
        404:
          description: "datatype not found"
  /repositories/{repos-name}/{version}/fields:
    get:
      tags:
      - "repository"
      summary: "searches fields"
      description: "By passing in the appropriate options, you can search for fields "
      operationId: "searchFields"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up fields"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Field"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a field"
      description: "Adds a field"
      operationId: "addField"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - in: "body"
        name: "field"
        description: "field to add"
        required: false
        schema:
          $ref: "#/definitions/Field"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/fields/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single field, if found"
      operationId: "findFieldById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of field to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "field response"
          schema:
            $ref: "#/definitions/Field"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single field, if found (idempotent)"
      operationId: "updateFieldById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of field to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "field"
        description: "field to update"
        required: true
        schema:
          $ref: "#/definitions/Field"
      responses:
        204:
          description: "field updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single field based on the ID supplied"
      operationId: "deleteField"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of field to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "field deleted"
        404:
          description: "field not found"
  /repositories/{repos-name}/{version}/messages:
    get:
      tags:
      - "repository"
      summary: "searches messages"
      description: "By passing in the appropriate options, you can search for messages "
      operationId: "searchMessages"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up messages"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "repository"
      summary: "adds a message scenario"
      description: "Adds a message scenario"
      operationId: "addMessage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - in: "body"
        name: "message"
        description: "message to add"
        required: false
        schema:
          $ref: "#/definitions/Message"
      - name: "toClone"
        in: "query"
        description: "ID of message to clone"
        required: false
        type: "integer"
        format: "int32"
      responses:
        201:
          description: "item created"
          headers:
            Location:
              type: "string"
              format: "uri"
              description: "URL of created resource"
        400:
          description: "invalid input, object invalid"
        409:
          description: "an existing item already exists"
  /repositories/{repos-name}/{version}/messages/{id}:
    get:
      tags:
      - "repository"
      summary: "Returns a single message scenario, if found"
      operationId: "findMessageById"
      produces:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message to fetch"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "message response"
          schema:
            $ref: "#/definitions/Message"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    put:
      tags:
      - "repository"
      summary: "Updates a single message scenario, if found (idempotent)"
      operationId: "updateMessageById"
      consumes:
      - "application/json"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message to update"
        required: true
        type: "integer"
        format: "int32"
      - in: "body"
        name: "message"
        description: "message to update"
        required: true
        schema:
          $ref: "#/definitions/Message"
      responses:
        204:
          description: "message updated"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      tags:
      - "repository"
      summary: "deletes a single message scenario based on the ID supplied"
      operationId: "deleteMessage"
      parameters:
      - name: "repos-name"
        in: "path"
        description: "name of Orchestra repository"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "version of Orchestra repository"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of message to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        204:
          description: "message deleted"
        404:
          description: "message not found"
definitions:
  Annotation:
    type: "object"
    properties:
      appinfo:
        type: "array"
        items:
          $ref: "#/definitions/Appinfo"
      documentation:
        type: "array"
        items:
          $ref: "#/definitions/Documentation"
  Appinfo:
    type: "object"
    required:
    - "$"
    properties:
      $:
        type: "string"
      specURL:
        type: "string"
        format: "uri"
      langId:
        type: "string"
        example: "en"
        description: "a language code (ISO 639-1)"
      purpose:
        type: "string"
        example: "SYNOPSIS"
    description: "Usage specific annotation, optionally with link to an external reference\
      \ or standard"
  Code:
    type: "object"
    required:
    - "oid"
    - "value"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      value:
        type: "string"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  CodeSet:
    type: "object"
    required:
    - "oid"
    - "type"
    properties:
      oid:
        $ref: "#/definitions/ObjectId"
      type:
        type: "string"
      specURL:
        type: "string"
        format: "uri"
      default:
        type: "string"
      codes:
        type: "array"
        items:
          $ref: "#/definitions/Code"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  Component:
    allOf:
    - $ref: "#/definitions/MessageElement"
    - type: "object"
      properties:
        elements:
          $ref: "#/definitions/MessageElements"
  ComponentRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
    - {}
  Documentation:
    type: "object"
    required:
    - "$"
    properties:
      $:
        type: "string"
        description: "text of Documentation"
      langId:
        type: "string"
        example: "en"
        description: "a language code (ISO 639-1)"
      purpose:
        type: "string"
        example: "SYNOPSIS"
  Datatype:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      baseType:
        type: "string"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
  EntityAttributes:
    type: "object"
    properties:
      added:
        type: "string"
      addedEP:
        type: "integer"
      changeType:
        type: "string"
        enum:
        - "Editorial"
        - "Definitional"
      deprecated:
        type: "string"
      deprecatedEP:
        type: "integer"
      issue:
        type: "string"
      lastModified:
        type: "string"
      replaced:
        type: "string"
      replacedEP:
        type: "integer"
      replacedByField:
        type: "integer"
      supported:
        type: "string"
        enum:
        - "supported"
        - "forbidden"
        - "ignored"
        default: "supported"
      updated:
        type: "string"
      updatedEP:
        type: "integer"
    description: "element metadata including pedigree"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  Field:
    allOf:
    - $ref: "#/definitions/MessageElement"
    - {}
  FieldRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
    - {}
  ElementRef:
    type: "object"
    required:
    - "elementType"
    - "oid"
    discriminator: "elementType"
    properties:
      elementType:
        type: "string"
      oid:
        $ref: "#/definitions/ObjectId"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
      category:
        type: "string"
  Group:
    allOf:
    - $ref: "#/definitions/Component"
    - type: "object"
      required:
      - "numInGroupId"
      - "numInGroupName"
      properties:
        numInGroupId:
          type: "integer"
        numInGroupName:
          type: "string"
        implMinOccurs:
          type: "integer"
        implMaxOccurs:
          type: "integer"
  GroupRef:
    allOf:
    - $ref: "#/definitions/ElementRef"
    - {}
  Message:
    type: "object"
    properties:
      scenario:
        type: "string"
        description: "Use case of a message type"
        maxLength: 64
        default: "base"
      flow:
        type: "string"
        description: "A stream of messages between actors"
        maxLength: 64
      msgType:
        type: "string"
        maxLength: 2
      structure:
        $ref: "#/definitions/MessageElements"
      responses:
        type: "array"
        items:
          $ref: "#/definitions/Response"
  MessageElement:
    type: "object"
    required:
    - "elementType"
    - "oid"
    discriminator: "elementType"
    properties:
      elementType:
        type: "string"
      oid:
        $ref: "#/definitions/ObjectId"
      annotation:
        $ref: "#/definitions/Annotation"
      entityAttributes:
        $ref: "#/definitions/EntityAttributes"
      category:
        type: "string"
  MessageElements:
    type: "array"
    items:
      $ref: "#/definitions/ElementRef"
  Metadata:
    type: "object"
    required:
    - "identifier"
    properties:
      identifier:
        type: "string"
        description: "unique ID of an Orchestra repository"
      contributor:
        type: "string"
      coverage:
        type: "string"
        example: "SingleGeneralOrderHandling"
        description: "a FIX category or guideline"
      creator:
        type: "string"
      date:
        type: "string"
        format: "date"
        description: "when the file was produced"
      description:
        type: "string"
        description: "a summary"
      format:
        type: "string"
        description: "file format"
      language:
        type: "string"
      relation:
        type: "string"
        description: "a related resource"
      rights:
        type: "string"
      publisher:
        type: "string"
        example: "FIX Trading Community"
      source:
        type: "string"
        description: "a resource from which this one was derived"
      subject:
        type: "string"
      title:
        type: "string"
      type:
        type: "string"
    description: "description of an Orchestra repository, conforms to Dublin Core\
      \ Terms"
  ObjectId:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      name:
        type: "string"
        example: "Account"
        description: "Name, unique within a file"
        maxLength: 64
      id:
        type: "integer"
        format: "int32"
        example: 1
        description: "Numeric ID, unique within a file, e.g. a field tag"
      abbrName:
        type: "string"
        example: "Acct"
        description: "Short name"
        maxLength: 64
      oid:
        type: "string"
        description: "Globally unique object identifier, a URI or UUID"
  Repository:
    type: "object"
    required:
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "Stable name that does not change with minor version updates"
      version:
        type: "string"
      oid:
        type: "string"
        description: "Globally unique object identifier, a URI or UUID"
      specURL:
        type: "string"
        format: "uri"
        description: "Reference documentation"
      namespace:
        type: "string"
        format: "uri"
        description: "Associated schema namespace"
      hasComponents:
        type: "boolean"
      metadata:
        $ref: "#/definitions/Metadata"
  Response:
    type: "object"
